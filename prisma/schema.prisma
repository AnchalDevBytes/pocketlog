generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  phone    String?
  timezone String? @default("UTC")

  accounts Account[]
  sessions Session[]

  // Expense tracker specific fields
  transactions Transaction[]
  categories   Category[]
  bankAccounts BankAccount[]
  budgets      Budget[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id           String        @id @default(cuid())
  name         String
  color        String        @default("#3B82F6")
  icon         String        @default("üìù")
  type         CategoryType  @default(EXPENSE)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  budgetId String?
  budget   Budget? @relation(fields: [budgetId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, userId])
}

model BankAccount {
  id           String        @id @default(cuid())
  name         String
  balance      Float         @default(0)
  type         AccountType   @default(CHECKING)
  userId       String
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id          String          @id @default(cuid())
  amount      Float
  description String
  type        TransactionType
  date        DateTime        @default(now())

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  accountId String
  account   BankAccount @relation(fields: [accountId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Budget {
  id        String       @id @default(cuid())
  name      String
  amount    Float
  period    BudgetPeriod @default(MONTHLY)
  startDate DateTime
  endDate   DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  categories Category[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum CategoryType {
  INCOME
  EXPENSE
}

enum AccountType {
  CHECKING
  SAVINGS
  CREDIT_CARD
  INVESTMENT
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  YEARLY
}
